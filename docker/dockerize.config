################################################################################
# Stellar docker image building and publishing script.
#
# This file holds project-specific configuration for dockerize.sh.
#
# Released under the Apache License, Version 2.0
# See http://www.apache.org/licenses/LICENSE-2.0
################################################################################

################################################################################
# Command to obtain the project version string.
#
# The command should print the version string alone (on stdout). Add your own or
# uncomment one of the examples provided.
#
### Dummy: always fail to get version.
#version_cmd=false
#
### Java with Maven
#version_cmd="mvn -q -Dexec.executable=\"echo\" -Dexec.args='${project.version}' --non-recursive exec:exec"
#
### Clojure with lein-project-version plugin
#version_cmd="lein project-version|tail -1"
#
### Clojure going through Maven
#version_cmd="lein pom &> /dev/null && mvn -q -Dexec.executable=\"echo\" -Dexec.args='${project.version}' --non-recursive exec:exec"
#
### Python with setup.py file.
version_cmd="python setup.py --version"

################################################################################
# Version regular expressions.
#
# Define the format of release and  snapshot versions. Add your own or uncomment
# one of the examples provided.
#
### Maven-style semantic versioning (x.y.z and x.y.z-SNAPSHOT).
#release_re="^[0-9]+\.[0-9]+\.[0-9]+$"
#snapshot_re="^[0-9]+\.[0-9]+\.[0-9]+-SNAPSHOT$"
#
### Semantic versioning for Python, abusing 'beta' versions (x.y.z and x.y.zb)
### Note: x.y.zb is a valid version, but setuptools will normalize to x.y.zb0
release_re="^[0-9]+\.[0-9]+\.[0-9]+$"
snapshot_re="^[0-9]+\.[0-9]+\.[0-9]+b[0]?$"

################################################################################
# Files to be copied to the docker container.
#
# Paths, one per  line, can be absolute or relative  to the directory containing
# dockerize.sh.  Wildcards  (e.g.  '*')  cannot be used,  but '~/'  can.  System
# environment variables  can be used. The  variable '\$version' must be  used in
# escaped form and contains the project's current version.

files=(
    # Example: paths relative to script directory.
    #
    "../../stellar-py"
    # Example: absolute path
    #"/tmp/data.csv"
    #
    # Example: user's home, two ways of referencing.
    #"~/test.txt"
    #"$HOME/test.txt"
)

################################################################################
# Dockerfile
#
# Path  can  be  absolute  or  relative to  dockerize.sh  directory.  Same  name
# expansion rules of files apply.

dockerfile="Dockerfile"

# End of configuration
################################################################################
